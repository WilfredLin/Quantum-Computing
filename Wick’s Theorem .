import numpy as np

class WicksTheorem:
    def __init__(self, fields):
        self.fields = fields

    def normal_order(self, operator):
        # Normal ordering of the operator
        # This is a placeholder for the actual implementation
        return operator

    def wicks_contraction(self, operator1, operator2):
        # Calculate the contraction between two operators
        # This is a placeholder for the actual implementation
        return f"<{operator1} {operator2}>"

    def apply_wicks_theorem(self, operators):
        # Apply Wick's theorem to a list of operators
        contractions = []
        for i in range(len(operators)):
            for j in range(i + 1, len(operators)):
                contraction = self.wicks_contraction(operators[i], operators[j])
                contractions.append(contraction)
        return contractions

    def display_contractions(self, operators):
        contractions = self.apply_wicks_theorem(operators)
        for contraction in contractions:
            print(contraction)

# Example usage:
if __name__ == '__main__':
    fields = ['phi', 'psi']  # Example fields
    wicks = WicksTheorem(fields)
    operators = ['phi(x1)', 'phi(x2)', 'psi(x3)']  # Example operators
    wicks.display_contractions(operators)
