import numpy as np

class CliffordAlgebra:
    def __init__(self, dimension):
        self.dimension = dimension
        self.gamma_matrices = self.generate_gamma_matrices()

    def generate_gamma_matrices(self):
        # Generate the gamma matrices for the Clifford algebra
        gamma_matrices = []
        for i in range(self.dimension):
            gamma = np.zeros((2**self.dimension, 2**self.dimension))
            for j in range(2**self.dimension):
                if (j >> i) & 1:
                    gamma[j, j ^ (1 << i)] = 1
                    gamma[j ^ (1 << i), j] = -1
            gamma_matrices.append(gamma)
        return gamma_matrices

    def anticommutator(self, i, j):
        # Calculate the anticommutator of two gamma matrices
        return np.dot(self.gamma_matrices[i], self.gamma_matrices[j]) + np.dot(self.gamma_matrices[j], self.gamma_matrices[i])

    def display_gamma_matrices(self):
        # Display the gamma matrices
        for i, gamma in enumerate(self.gamma_matrices):
            print(f"Gamma matrix {i}:\n{gamma}\n")

# Example usage:
if __name__ == '__main__':
    dimension = 4  # Example dimension for the Clifford algebra
    clifford = CliffordAlgebra(dimension)
    
    # Display the gamma matrices
    clifford.display_gamma_matrices()
    
    # Calculate and display the anticommutator of gamma_0 and gamma_1
    anticommutator_result = clifford.anticommutator(0, 1)
    print("Anticommutator of gamma_0 and gamma_1:\n", anticommutator_result)
