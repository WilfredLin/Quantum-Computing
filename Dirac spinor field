import numpy as np

class DiracSpinorField:
    def __init__(self):
        self.gamma_matrices = self.generate_gamma_matrices()
        self.spinors = self.initialize_spinors()

    def generate_gamma_matrices(self):
        # Generate the gamma matrices for the Dirac representation
        gamma_0 = np.array([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 0], [0, 0, 0, -1]])
        gamma_1 = np.array([[0, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 0]])
        gamma_2 = np.array([[0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 0], [1, 0, 0, 0]])
        gamma_3 = np.array([[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])
        
        return [gamma_0, gamma_1, gamma_2, gamma_3]

    def initialize_spinors(self):
        # Initialize Dirac spinors (4-component)
        return np.zeros((4, 1))

    def set_spinor(self, index, value):
        # Set the value of a specific component of the spinor
        self.spinors[index] = value

    def display_spinors(self):
        # Display the current state of the spinors
        print("Current Dirac spinors:\n", self.spinors)

    def anticommutator(self, i, j):
        # Calculate the anticommutator of two gamma matrices
        return np.dot(self.gamma_matrices[i], self.gamma_matrices[j]) + np.dot(self.gamma_matrices[j], self.gamma_matrices[i])

# Example usage:
if __name__ == '__main__':
    dirac_field = DiracSpinorField()
    
    # Set values for the spinors
    dirac_field.set_spinor(0, 1)
    dirac_field.set_spinor(1, 0.5)
    
    # Display the spinors
    dirac_field.display_spinors()
    
    # Calculate and display the anticommutator of gamma_0 and gamma_1
    anticommutator_result = dirac_field.anticommutator(0, 1)
    print("Anticommutator of gamma_0 and gamma_1:\n", anticommutator_result)
