import numpy as np
import matplotlib.pyplot as plt

class IsingModel:
    def __init__(self, size, temperature):
        self.size = size
        self.temperature = temperature
        self.spins = np.random.choice([-1, 1], size=(size, size))
        self.J = 1  # Interaction strength

    def energy(self):
        total_energy = 0
        for i in range(self.size):
            for j in range(self.size):
                total_energy -= self.J * self.spins[i, j] * (
                    self.spins[(i + 1) % self.size, j] +  
                    self.spins[i, (j + 1) % self.size]
                )
        return total_energy / 2  # Each pair counted twice

    def magnetization(self):
        return np.sum(self.spins)

    def flip_spin(self, i, j):
        self.spins[i, j] *= -1

    def monte_carlo_step(self):
        for _ in range(self.size ** 2):
            i = np.random.randint(0, self.size)
            j = np.random.randint(0, self.size)
            delta_E = 2 * self.spins[i, j] * (self.spins[(i + 1) % self.size, j] + 
                                                self.spins[i, (j + 1) % self.size] + 
                                                self.spins[(i - 1) % self.size, j] + 
                                                self.spins[i, (j - 1) % self.size])
            if delta_E < 0 or np.random.rand() < np.exp(-delta_E / self.temperature):
                self.flip_spin(i, j)

    def run(self, steps):
        magnetizations = []
        for _ in range(steps):
            self.monte_carlo_step()
            magnetizations.append(self.magnetization())
        return magnetizations

# Parameters
size = 20
temperature = 2.5
steps = 10000

# Create Ising model
ising_model = IsingModel(size, temperature)
magnetization_data = ising_model.run(steps)

# Plotting
plt.plot(magnetization_data)
plt.xlabel('Monte Carlo Steps')
plt.ylabel('Magnetization')
plt.title('Magnetization vs Steps for Ising Model')
plt.show()
