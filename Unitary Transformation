import numpy as np

# Define a function for a unitary transformation
def unitary_transformation(matrix):
    """Check if a matrix is unitary."""
    # Calculate the conjugate transpose of the matrix
    conjugate_transpose = np.conjugate(np.transpose(matrix))
    # Check if the product of the matrix and its conjugate transpose is the identity matrix
    identity = np.dot(matrix, conjugate_transpose)
    return np.allclose(identity, np.eye(matrix.shape[0]))

# Example: Define a 2x2 unitary matrix (e.g., a rotation matrix)
theta = np.pi / 4  # 45 degrees
unitary_matrix = np.array([[np.cos(theta), -np.sin(theta)],
                            [np.sin(theta), np.cos(theta)]])

# Check if the matrix is unitary
is_unitary = unitary_transformation(unitary_matrix)

print("Unitary Matrix:")
print(unitary_matrix)
print("Is the matrix unitary?", is_unitary)

# Define a state vector
state_vector = np.array([1, 0])  # Example state |0>

# Apply the unitary transformation to the state vector
transformed_state = np.dot(unitary_matrix, state_vector)

print("Transformed State Vector:")
print(transformed_state)
