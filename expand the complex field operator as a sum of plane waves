import numpy as np

class ComplexScalarField:
    def __init__(self, mass, field_strength, grid_size, k_values):
        self.mass = mass  # mass of the scalar field
        self.field_strength = field_strength  # strength of the field
        self.grid_size = grid_size  # size of the spatial grid
        self.k_values = k_values  # wave numbers for plane wave expansion
        self.field = np.zeros(grid_size, dtype=np.complex_)  # complex scalar field initialized to zero

    def initialize_field(self):
        """Initialize the field with random complex values."""
        self.field = np.random.rand(self.grid_size) + 1j * np.random.rand(self.grid_size)

    def potential_energy(self):
        """Calculate the potential energy of the field."""
        return 0.5 * self.mass**2 * np.sum(np.abs(self.field)**2)

    def kinetic_energy(self):
        """Calculate the kinetic energy of the field."""
        # For simplicity, assume a finite difference approximation for the kinetic term
        laplacian = np.roll(self.field, 1) - 2 * self.field + np.roll(self.field, -1)
        return 0.5 * np.sum(np.abs(laplacian)**2)

    def total_energy(self):
        """Calculate the total energy of the field."""
        return self.kinetic_energy() + self.potential_energy()

    def expand_field(self):
        """Expand the complex field operator as a sum of plane waves."""
        plane_wave_sum = np.zeros(self.grid_size, dtype=np.complex_)
        for k in self.k_values:
            plane_wave_sum += np.exp(1j * k * np.arange(self.grid_size))
        self.field = plane_wave_sum

    def display_field_info(self):
        """Display information about the scalar field."""
        print(f"Mass: {self.mass}")
        print(f"Field Strength: {self.field_strength}")
        print(f"Total Energy: {self.total_energy()}")
        print(f"Field Configuration: {self.field}")

# Example: Create a complex scalar field
k_values = np.linspace(-np.pi, np.pi, num=10)  # Example wave numbers
scalar_field = ComplexScalarField(
    mass=1.0,  # mass of the scalar field
    field_strength=0.5,  # strength of the field
    grid_size=10,  # size of the spatial grid
    k_values=k_values  # wave numbers for plane wave expansion
)

# Initialize, expand the field, and display the field information
scalar_field.initialize_field()
scalar_field.expand_field()
scalar_field.display_field_info()
