import numpy as np
import matplotlib.pyplot as plt

class RadicalPairDynamics:
    def __init__(self, k1, k2, k3, dt, t_max):
        self.k1 = k1  # Forward reaction rate
        self.k2 = k2  # Backward reaction rate
        self.k3 = k3  # Decay rate
        self.dt = dt  # Time step
        self.t_max = t_max  # Maximum time
        self.times = np.arange(0, t_max, dt)
        self.concentration = np.zeros((len(self.times), 2))  # Concentrations of radical pairs

    def simulate(self):
        for i in range(1, len(self.times)):
            A, B = self.concentration[i-1]
            dA_dt = -self.k1 * A + self.k2 * B
            dB_dt = self.k1 * A - (self.k2 + self.k3) * B
            self.concentration[i, 0] = A + dA_dt * self.dt
            self.concentration[i, 1] = B + dB_dt * self.dt

    def plot_results(self):
        plt.plot(self.times, self.concentration[:, 0], label='Concentration of A')
        plt.plot(self.times, self.concentration[:, 1], label='Concentration of B')
        plt.xlabel('Time')
        plt.ylabel('Concentration')
        plt.title('Radical Pair Dynamics')
        plt.legend()
        plt.grid()
        plt.show()

# Example usage
if __name__ == '__main__':
    k1 = 1.0  # Forward reaction rate
    k2 = 0.5  # Backward reaction rate
    k3 = 0.1  # Decay rate
    dt = 0.01  # Time step
    t_max = 10.0  # Maximum time

    rpd = RadicalPairDynamics(k1, k2, k3, dt, t_max)
    rpd.simulate()
    rpd.plot_results()
