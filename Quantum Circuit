import numpy as np

class QuantumCircuit:
    def __init__(self, num_qubits: int):
        self.num_qubits = num_qubits
        self.state = np.zeros((2**num_qubits, 1), dtype=complex)
        self.state[0] = 1  # Initialize to |0...0>

    def apply_hadamard(self, qubit: int):
        # Apply Hadamard gate to a specific qubit
        H = 1/np.sqrt(2) * np.array([[1, 1], [1, -1]])
        self._apply_gate(H, qubit)

    def apply_cnot(self, control: int, target: int):
        # Apply CNOT gate with control and target qubits
        CNOT = np.array([[1, 0, 0, 0],
                         [0, 1, 0, 0],
                         [0, 0, 0, 1],
                         [0, 0, 1, 0]])
        self._apply_gate(CNOT, control, target)

    def _apply_gate(self, gate: np.ndarray, qubit: int, target_qubit: int = None):
        # Construct the full gate for the circuit
        full_gate = np.eye(1)
        for i in range(self.num_qubits):
            if i == qubit:
                full_gate = np.kron(full_gate, gate)
            elif i == target_qubit:
                # Skip target qubit for CNOT
                continue
            else:
                full_gate = np.kron(full_gate, np.eye(2))
        
        # Apply the gate to the current state
        self.state = np.dot(full_gate, self.state)

    def measure(self):
        # Measure the state of the qubits
        probabilities = np.abs(self.state)**2
        outcome = np.random.choice(range(2**self.num_qubits), p=probabilities.flatten())
        return outcome

# Example usage
num_qubits = 2
qc = QuantumCircuit(num_qubits)

# Apply Hadamard gate to the first qubit
qc.apply_hadamard(0)

# Apply CNOT gate with the first qubit as control and the second as target
qc.apply_cnot(0, 1)

# Measure the state of the qubits
result = qc.measure()
print(f'Measurement result: {result}')
