import numpy as np

class QPSO:
    def __init__(self, num_particles, num_dimensions, max_iter, bounds):
        self.num_particles = num_particles
        self.num_dimensions = num_dimensions
        self.max_iter = max_iter
        self.bounds = bounds
        self.particles = np.random.uniform(bounds[0], bounds[1], (num_particles, num_dimensions))
        self.velocities = np.random.uniform(-1, 1, (num_particles, num_dimensions))
        self.best_positions = self.particles.copy()
        self.best_scores = np.full(num_particles, np.inf)
        self.global_best_position = None
        self.global_best_score = np.inf

    def fitness_function(self, x):
        return np.sum(x**2)  # Example: Sphere function

    def update_particles(self):
        for i in range(self.num_particles):
            score = self.fitness_function(self.particles[i])
            if score < self.best_scores[i]:
                self.best_scores[i] = score
                self.best_positions[i] = self.particles[i].copy()

            if score < self.global_best_score:
                self.global_best_score = score
                self.global_best_position = self.particles[i].copy()

        for i in range(self.num_particles):
            r1 = np.random.rand(self.num_dimensions)
            r2 = np.random.rand(self.num_dimensions)
            self.velocities[i] = (self.best_positions[i] - self.particles[i]) * r1 + 
                                  (self.global_best_position - self.particles[i]) * r2
            self.particles[i] += self.velocities[i]
            self.particles[i] = np.clip(self.particles[i], self.bounds[0], self.bounds[1])

    def optimize(self):
        for iteration in range(self.max_iter):
            self.update_particles()
        return self.global_best_position, self.global_best_score

# Example usage:
if __name__ == '__main__':
    qps = QPSO(num_particles=30, num_dimensions=2, max_iter=100, bounds=(-10, 10))
    best_position, best_score = qps.optimize()
    print(f'Best Position: {best_position}, Best Score: {best_score}')
