import numpy as np

class DrivenNonlinearOscillator:
    def __init__(self, omega, kappa, driving_amplitude, driving_frequency):
        self.omega = omega
        self.kappa = kappa
        self.driving_amplitude = driving_amplitude
        self.driving_frequency = driving_frequency

    def effective_hamiltonian(self, n_levels):
        # Create a matrix to represent the Hamiltonian
        H = np.zeros((n_levels, n_levels), dtype=complex)
        for n in range(n_levels):
            # Diagonal terms (energy levels)
            H[n, n] = self.omega * (n + 0.5) - self.kappa * n**2
            for m in range(n_levels):
                if n != m:
                    # Off-diagonal terms (interaction due to driving)
                    H[n, m] += (self.driving_amplitude / 2) * 
                                 (np.sqrt(n + 1) * np.sqrt(m) * 
                                  np.exp(-1j * self.driving_frequency * (m - n)))
        return H

# Example usage
oscillator = DrivenNonlinearOscillator(omega=1.0, kappa=0.1, driving_amplitude=0.5, driving_frequency=1.0)
H_effective = oscillator.effective_hamiltonian(n_levels=5)
print("Effective Hamiltonian:")
print(H_effective)
